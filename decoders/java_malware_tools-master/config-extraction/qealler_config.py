#!/usr/bin/env python3

from Crypto.Cipher import AES
import sys
import base64
import json
from zipfile import ZipFile
import subprocess
import re

config = {}
unhandled_params = []

key = b"bbb6fec5ebef0d93"
procyon = "/opt/decoders/utils/java/procyon-decompiler-0.5.30.jar"

def doWork(path):
    buf = None
    zipf = ZipFile(path, "r")
    files = zipf.infolist()

    props = subprocess.run(['java','-jar',procyon,path], stdout=subprocess.PIPE)
    props = re.search('getResourceAsStream\("([^"]+)',str(props))
    config["conf_file"] = props.group(1)

    buf = zipf.read(config["conf_file"][1:])

    if not buf:
        print("[!] no config file found! dying...")
        sys.exit(-1)

    c = AES.new(key)
    buf = buf[:-buf[-1]]
    tok = buf.decode("ascii").split("\n")
    config["c2"] = []
    for t in tok:
        if not t:
            continue
        k, v = t.split("=", 1)
        val = base64.b64decode(t.split("=", 1)[1])
        dec = c.decrypt(val)
        dec = dec[:-dec[-1]]
        if k == "9dac744cf076e11d7c363a2012c2f781e2d1c8f59433547a47907ea40c57dd03":
            c2s = dec.decode("ascii").split(",")
            config["c2"] = c2s
        elif k == "2a898bc98aaf6c96f2054bb1eadc9848eb77633039e9e9ffd833184ce553fe9b":
            config["uuid"] = dec.decode("utf-8")
        else:
            if bool(re.match('https?',dec.decode("ascii"))):
                config["c2"].append(dec.decode("ascii"))
            else:
                unhandled_params.append(k)

    print(json.dumps(config))
    if unhandled_params:
        print("Unhandled params:", unhandled_params)

if __name__=="__main__":
    if len(sys.argv) < 2:
        print("usage: {} <filename>".format(sys.argv[0]))
        sys.exit(-1)
    doWork(sys.argv[1])