#!/usr/bin/python

from Crypto.Cipher import AES
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
from io import BytesIO
from requests.auth import HTTPBasicAuth
from zipfile import ZipFile
import hashlib
import json
import requests
import string
import sys

DUMP = False
PRINT = False

def GetRsaKey(bytes):
    idx = bytes.find("\x78\x70\x00\x00")
    start = bytes[idx:idx+0x20].find("\x30\x82") + idx
    end = bytes.find("\x74\x00\x06\x50\x4B")
    size = start-end

    key = bytes[start:end]

    keyPriv = RSA.importKey(key)
    cipher = PKCS1_v1_5.new(keyPriv)
    return cipher

def DecryptAes(aesKey, payload):
    aes = AES.new(aesKey, AES.MODE_ECB)
    return aes.decrypt(payload)

def GetAesKey(rsaKey, aesKey):
    aesKey = aesKey[:256]
    return rsaKey.decrypt(aesKey, None)

def DecryptPayload(rsaKey, aesKey, payload):
    rsa = GetRsaKey(rsaKey)
    aes = GetAesKey(rsa, aesKey)
    print("[+] aesKey len: {}".format(len(aes)))
    print("[+] trying to decrypt payload of length {}".format(len(payload)))
    if len(payload) % 16 != 0:
        payload = payload[:-(len(payload)%16)]
    print("[+] trying to decrypt payload of length {}".format(len(payload)))
    res = DecryptAes(aes, payload)
    return res

def DecryptJar(filename):
    jar = ZipFile(filename, "r")
    files = jar.infolist()
    aesKeys = []
    rsaKeys = []
    payload = None
    print("[+] Finding keys...")
    for i in files:
        if i.filename.endswith(".class") or i.filename.endswith("MANIFEST.MF") or i.filename.endswith(".decrypted"):
            continue
        if i.file_size == 256 or i.file_size == 512 or i.file_size < 1024:
            aesKeys.append(i)
        elif i.file_size > 50000 and not i.filename.endswith("iiiiiiiiii.class"):
            print("[+] payload set to {}".format(i.filename))
            payload = i
        else:
            rsaKeys.append(i)
    if len(aesKeys) < 2 or len(rsaKeys) < 2 or payload is None:
        print("[!] I was unable to recognize this archive as JBifrost. Exiting...")
        print("[!] aesKeys: {}, rsaKeys: {}, payload: {}".format(len(aesKeys), len(rsaKeys), payload))
        sys.exit(-1)

    success = False
    data = None
    for rKey in rsaKeys:
        print("[+] Trying rsaKey {}".format(rKey.filename))
        for aKey in aesKeys:
            print("[+]\ttrying aesKey {}".format(aKey.filename))
            try:
                data = DecryptPayload(jar.read(rKey), jar.read(aKey), jar.read(payload))
                print("[+] first four bytes of buffer: {}".format(data[:4].encode("hex")))
                if data[0:2] == "PK":
                    success = True
                    print "[!] Decrypted JAR file!"
                    return data
            except Exception, e:
                continue

    if not success:
        print "[!] Unable to decrypt JAR file! Exiting..."
        sys.exit(-1)

unpad = lambda s : s[0:-ord(s[-1])]

def DoWorkDecryptedJar(jar):
    fileObj = BytesIO(jar)
    zipFile = ZipFile(fileObj)

    try:
        api_version = zipFile.read("module/api.json")
        papi = json.loads(api_version)
        print "[+] Found JBifrost API version: {}".format(papi["version"])
    except:
        pass

    try:
        rsaKey = zipFile.read("server/resources/Key1.json")
        aesKey = zipFile.read("server/resources/Key2.json")
        config = zipFile.read("server/resources/config.json")

        data = DecryptPayload(rsaKey, aesKey, config)
        return data
    except Exception, e:
        print "[!] Unable to decrypt payload! Exiting..."
        sys.exit(-1)

def DoWork(filename):
    zipf = ZipFile(filename, "r")
    try:
        rsaKey = zipf.read("server/resources/Key1.json")
        with open(filename, "r") as f:
            return DoWorkDecryptedJar(f.read())
    except KeyError:
        jar = DecryptJar(filename)
        if DUMP:
            with open(filename + ".decrypted", "wb") as f:
                f.write(jar)
    return DoWorkDecryptedJar(jar)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print "usage: ./JBifrost.py <filename>"
        sys.exit()

    for i in sys.argv:
        if i == "--dump":
            DUMP = True
        elif i == "--print":
            PRINT = True

    print "[+] Searching for Config"
    raw_config = DoWork(sys.argv[1])
    with open(sys.argv[1], "rb") as f:
        buf = f.read()
    GLOBAL_MD5 = hashlib.md5(buf).hexdigest()
    printable = set(string.printable)
    c = filter(lambda x: x in printable, unpad(raw_config))
    config = json.loads(c)

    d = {}
    d["nickname"] = config["NICKNAME"]
    d["network"] = config["NETWORK"]
    d["encryption_key"] = config["ENCRYPT_KEY"]
    d["md5"] = GLOBAL_MD5
    auth = HTTPBasicAuth("scraper", "c34d2a33b244cf843fec5f4d2733af75")
    print "[+] Posting config to JBifrostDB"
    requests.post("https://services.jurg.no/jbifrostdb/submit", json=d, auth=auth)

    try:
        print "[+] Printing Config to screen"
        for key, value in sorted(config.iteritems()):
            print "   [-] Key: {0}\t Value: {1}".format(key,value)
        print "[+] End of Config"
    except:
        print "[!] Unable to parse config as json, dumping raw."
        print raw_config
    if PRINT:
        print json.dumps(json.loads(unpad(raw_config)), indent=4)
