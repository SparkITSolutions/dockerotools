#!/usr/bin/env python3

from zipfile import ZipFile
import re
import sys
import base64

regex_REPLACESRC = re.compile(b".*\.replace\(.*?, \"(.*?)\"\).*", re.DOTALL | re.MULTILINE)
regex_REPLACETARGET = re.compile(b".*(?:Array|new RegExp)\(\"(.*?)\", \"g\"\).*", re.DOTALL | re.MULTILINE)

regex_INITIALB64 = [
    re.compile(b".*\"(.{1000,}?)\", \"bin.base64\".*", re.DOTALL | re.MULTILINE),
    re.compile(b"var .*? = \"(.{1000,}?)\".*", re.DOTALL | re.MULTILINE),
    re.compile(b".*return \"(.{1000,}?)\".*", re.DOTALL | re.MULTILINE),
    re.compile(b".*\[\"(.{1000,}?)\"\].*", re.DOTALL | re.MULTILINE),
]

def get_payloads(buf):
    res = []
    lines = buf.decode("ascii").split("\n")
    rex = re.compile(r".*\"(.*?)\".*").match(lines[0])
    if not rex:
        panic("first payload line not found")
    data = get_stage_1(base64.b64decode(rex.group(1)))
    res.append(data)

    rex = re.compile(b".*var longText = \"(.*?)\".*", re.DOTALL | re.MULTILINE).match(buf)
    if not rex:
        panic("second payload data not found")
    second_payload = rex.group(1)
    # get replace for second payload
    replace_target = re.compile(b".*new RegExp\(\"(.*?)\", \"g\"\).*", re.DOTALL | re.MULTILINE).match(buf).group(1)
    replace_src = re.compile(b".*\.replace\(re, \"(.*?)\"\).*", re.DOTALL | re.MULTILINE).match(buf).group(1)

    res.append(base64.b64decode(second_payload.replace(replace_target, replace_src)))

    return res

def print_c2_from_wshrat(buf):
    host = re.compile(b".*var host = \"(.*?)\".*", re.DOTALL | re.MULTILINE).match(buf).group(1).decode("ascii")
    port = re.compile(b".*var port = (\d+).*", re.DOTALL | re.MULTILINE).match(buf).group(1).decode("ascii")
    print("wshratc2: {}:{}".format(host, port))

def stage_2(buf, path):
    payloads = get_payloads(buf)
    i = 1
    for p in payloads:
        if b"var host" in p:
            print_c2_from_wshrat(p)
        with open(path + ".unpacked_{}".format(i), "wb") as f:
            f.write(p)
        i += 1

def match_regex_list(regex_list, buf):
    for r in regex_list:
        rex = r.match(buf)
        if rex:
            return rex
    return None

def get_stage_1(buf):
    # get initial b64 blob
    rex = match_regex_list(regex_INITIALB64, buf)
    if not rex:
        panic("initial b64 pattern not found")
    payload = rex.group(1)

    # get replace pattern
    rex = regex_REPLACETARGET.match(buf)
    if not rex:
        panic("replace target not found")
    replace_target = rex.group(1)
    
    # what to replace it with
    rex = regex_REPLACESRC.match(buf)
    if not rex:
        panic("replace src not found")
    replace_src = rex.group(1)
    replaced_payload = base64.b64decode(payload.replace(replace_target, replace_src))
    return replaced_payload

def unpack(buf, path):
    data = get_stage_1(buf)
    stage_2(data, path)

def doWork(path):
    zipf = ZipFile(path)
    files = zipf.infolist()
    for file in files:
        if "resources/" in file.filename:
            buf = zipf.read(file)
            unpack(buf, path)
            return
    panic("no file to unpack found")

def panic(s):
    print("panic: {}".format(s))
    sys.exit(-1)

if __name__=="__main__":
    if len(sys.argv) < 2:
        print("usage: {} <filename>".format(sys.argv[0]))
        sys.exit(-1)

    doWork(sys.argv[1])